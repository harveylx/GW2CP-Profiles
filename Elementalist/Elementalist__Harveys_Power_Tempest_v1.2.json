{
	"@type": "profile_container",
	"build_ref": "https://snowcrows.com/builds/raids/elementalist/power-tempest",
	"configuration": {
		"Combat": {
			"BreakStun": true,
			"DefianceBreak": true,
			"EnableCombatBehaviour": false,
			"EnableCombatService": true,
			"EnableDownstateCombat": true,
			"EnablePetCombat": false,
			"RescuePets": false,
			"ResetSkillTransformations": true,
			"SwapRangerPets": false,
			"SwapWeapons": true,
			"WeaponFiller": false
		},
		"Targeting": {
			"EffectiveRangeAdjust": 1,
			"PreferMelee": false
		}
	},
	"default": 1,
	"export_config": 1,
	"game_modes": "100111",
	"global_script": [
		"enum GLYPH {",
		"    flame_elemental = 25488,",
		"    lightning_storm = 5737,",
		"}",
		"",
		"enum ATTUNEMENTS {",
		"    fire_attunement = 5492,",
		"    water_attunement = 5493,",
		"    air_attunement = 5494,",
		"}",
		"",
		"enum ATTUNEMENT_INDEX {",
		"    fire = 1,",
		"    water = 2,",
		"    air = 3,",
		"    earth = 4,",
		"}",
		"",
		"enum OVERLOADS {",
		"    overload_air = 29719,",
		"}",
		"",
		"enum HEALS {",
		"    wash_the_pain_away = 29535,",
		"    elemental_harmony_fire = 34743,",
		"    elemental_harmony_air = 34724,",
		"    elemental_harmony_water = 34651,",
		"    elemental_harmony_earth = 34609,",
		"    ether_renewal = 5507,",
		"    signet_of_restoration = 5503,",
		"    arcane_brilliance = 21656,",
		"}",
		"",
		"enum DEFIANCE_BREAK {",
		"    cyclone = 30008,",
		"    tidal_surge = 30864",
		"}",
		"",
		"enum WEAPON_SKILLS {",
		"    # Fire",
		"    phoenix = 5675,",
		"    dragons_tooth = 5692,",
		"    wildfire = 29533,",
		"",
		"    # Water",
		"    shatterstone = 5538,",
		"    water_trident = 5510,",
		"",
		"    # Air",
		"    lightning_orb = 30795,",
		"    arc_lightning = 5526,",
		"}",
		"",
		"enum INSTANT_CASTS {",
		"    flame_barrage = 25499,",
		"    feel_the_burn = 30662,",
		"    lightning_strike = 5561, # air attunement only",
		"    blinding_flash = 5694 # air attunement only",
		"}",
		"",
		"const _ACTIVATION_TIME_CONFIG: Dictionary = {",
		"\t29719: 3202,           # Overload Air",
		"    5510: 682,             # Water Trident",
		"    5538: 403,             # Shatterstone",
		"    30795: 453,            # Lightning Orb",
		"    5737: 1124,            # Lightning Storm",
		"    5675: 475,             # Phoenix",
		"    5692: 840,              # Wildfire",
		"    5492: 25,",
		"    5493: 25,",
		"    5494: 25",
		"}",
		"",
		"const OVERLOAD_THRESHOLD: int = 5000",
		"var last_switch_time: int = 0",
		"var runnable: bool = false",
		"var skill_bar: Dictionary = get_skillbar()",
		"var skill_util: SkillUtility = get_skill_utility()",
		"var agent_util: AgentUtility = get_agent_utility()",
		"var geometry_util: GeometryUtility = get_geometry_utility()",
		"var character_util: CharacterUtility = get_character_utility()",
		"var _controlled_character: ControlledCharacter",
		"",
		"func _process(_delta: float) -> void:",
		"    if should_abort():",
		"        abort_action()",
		"    if(not runnable):",
		"        return",
		"    if not _controlled_character:",
		"        _controlled_character = get_character_utility().get_cc()",
		"    if not _evaluate_can_run():",
		"        toggle_combat_behavior(true)",
		"        return",
		"    toggle_combat_behavior(false)",
		"    if not is_combat_assist_enabled():",
		"        return",
		"    handle_instant_casts(_controlled_character, skill_bar, skill_util)",
		"",
		"func initialize() -> void:",
		"    if skill_util == null:",
		"        skill_util = get_skill_utility()",
		"    if agent_util == null:",
		"        agent_util = get_agent_utility()",
		"    if geometry_util == null:",
		"        geometry_util = get_geometry_utility()",
		"    if character_util == null:",
		"        character_util = get_character_utility()",
		"    _compare_skillbars()",
		"",
		"func select_skill(cc: ControlledCharacter, target: Agent, _skill_id_filter: Array = []) -> SkillDataItem:",
		"    if(not _is_tempest() or not _are_weapons_valid()):",
		"        runnable = false",
		"        return null",
		"    var next_skill: SkillDataItem = get_next_skill(target, skill_util, agent_util, skill_bar)",
		"    if not next_skill == null:",
		"        if _ACTIVATION_TIME_CONFIG.has(next_skill.id):",
		"            next_skill.activation_time = _ACTIVATION_TIME_CONFIG[next_skill.id] * 2",
		"        if not next_skill.skill_range == null:",
		"            if geometry_util.get_distance_between(cc.selection, target, true) > next_skill.skill_range:",
		"                return null",
		"    return next_skill",
		"",
		"func get_next_skill(target: Agent, skill_utility: SkillUtility, agent_utility: AgentUtility, skill_bar: Dictionary) -> SkillDataItem:",
		"    var defiance: SkillDataItem = handle_defiance(skill_utility, agent_utility, target)",
		"    var glyphs: SkillDataItem = handle_glyphs(skill_utility, skill_bar)",
		"    var overload: SkillDataItem = handle_overloads(skill_utility, skill_bar)",
		"    var attunement: SkillDataItem = handle_attunement(skill_utility)",
		"    var weapon_skill: SkillDataItem = handle_weapon_skills(skill_utility, target)",
		"",
		"    if not defiance == null:",
		"        return defiance",
		"    if not glyphs == null:",
		"        return glyphs",
		"    if not overload == null:",
		"        return overload",
		"    if not attunement == null:",
		"        return attunement",
		"    if not weapon_skill == null:",
		"        return weapon_skill",
		"    return null",
		"",
		"func handle_defiance(skill_utility: SkillUtility, agent_utility: AgentUtility, target: Agent) -> SkillDataItem:",
		"    if target != null:",
		"        if agent_utility.has_break_bar(target) and target.break_bar.state == 0:",
		"            if (get_current_attunement() == ATTUNEMENT_INDEX.air):",
		"                var cyclone: SkillDataItem = get_skill(DEFIANCE_BREAK.cyclone)",
		"                if not skill_utility.is_on_cooldown(cyclone):",
		"                    return cyclone",
		"            if (get_current_attunement() == ATTUNEMENT_INDEX.water):",
		"                var tidal_surge: SkillDataItem = get_skill(DEFIANCE_BREAK.tidal_surge)",
		"                if not skill_utility.is_on_cooldown(tidal_surge):",
		"                    return tidal_surge",
		"    return null",
		"",
		"func handle_attunement(skill_utility: SkillUtility) -> SkillDataItem:",
		"    var current_time: int = Time.get_ticks_msec()",
		"",
		"    if current_time - last_switch_time < 350:",
		"        return null",
		"",
		"    if (get_current_attunement() != ATTUNEMENT_INDEX.air):",
		"        var air_attunement: SkillDataItem = get_from_skillbar(ATTUNEMENTS.air_attunement)",
		"",
		"        var phoenix: SkillDataItem = get_from_skillbar(WEAPON_SKILLS.phoenix)",
		"        var wildfire: SkillDataItem = get_from_skillbar(WEAPON_SKILLS.wildfire)",
		"        var dragons_tooth: SkillDataItem = get_from_skillbar(WEAPON_SKILLS.dragons_tooth)",
		"",
		"        var shatterstone: SkillDataItem = get_from_skillbar(WEAPON_SKILLS.shatterstone)",
		"        var water_trident: SkillDataItem = get_from_skillbar(WEAPON_SKILLS.water_trident)",
		"",
		"        if (",
		"            not skill_utility.is_on_cooldown(air_attunement) and",
		"            not skill_utility.is_being_cast(phoenix) and",
		"            not skill_utility.is_being_cast(wildfire) and",
		"            not skill_utility.is_being_cast(dragons_tooth) and",
		"            not skill_utility.is_being_cast(shatterstone) and",
		"            not skill_utility.is_being_cast(water_trident)",
		"            ):",
		"            last_switch_time = current_time",
		"            Log.warn(\"switching to air\")",
		"            return air_attunement",
		"",
		"    else:",
		"        var overload_air: SkillDataItem = get_from_skillbar(OVERLOADS.overload_air)",
		"        var fire_attunement: SkillDataItem = get_from_skillbar(ATTUNEMENTS.fire_attunement)",
		"        var water_attunement: SkillDataItem = get_from_skillbar(ATTUNEMENTS.water_attunement)",
		"",
		"        if not skill_utility.is_on_cooldown(water_attunement) and skill_utility.is_on_cooldown(overload_air) and skill_utility.get_remaining_cooldown_time(overload_air) > OVERLOAD_THRESHOLD and not skill_utility.is_being_cast(overload_air):",
		"            last_switch_time = current_time",
		"            Log.warn(\"switching to water\")",
		"            return water_attunement",
		"        elif not skill_utility.is_on_cooldown(fire_attunement) and skill_utility.is_on_cooldown(overload_air) and skill_utility.get_remaining_cooldown_time(overload_air) > OVERLOAD_THRESHOLD and not skill_utility.is_being_cast(overload_air):",
		"            Log.warn(\"switching to fire\")",
		"            last_switch_time = current_time",
		"            return fire_attunement",
		"    return null",
		"",
		"func handle_weapon_skills(skill_utility: SkillUtility, target: Agent) -> SkillDataItem:",
		"    var skills = []",
		"    # Add skills based on current attunement",
		"    if get_current_attunement() == ATTUNEMENT_INDEX.fire:",
		"        skills = [",
		"            get_from_skillbar(WEAPON_SKILLS.phoenix),",
		"            get_from_skillbar(WEAPON_SKILLS.wildfire),",
		"            get_from_skillbar(WEAPON_SKILLS.dragons_tooth)",
		"        ]",
		"    elif get_current_attunement() == ATTUNEMENT_INDEX.water:",
		"        skills = [",
		"            get_from_skillbar(WEAPON_SKILLS.shatterstone),",
		"            get_from_skillbar(WEAPON_SKILLS.water_trident)",
		"        ]",
		"    elif get_current_attunement() == ATTUNEMENT_INDEX.air:",
		"        skills = [",
		"            get_from_skillbar(WEAPON_SKILLS.lightning_orb),",
		"            get_from_skillbar(WEAPON_SKILLS.arc_lightning)",
		"        ]",
		"",
		"    # Check cooldown status for each skill",
		"    for skill in skills:",
		"        if skill != null and not skill_utility.is_on_cooldown(skill):",
		"            Log.warn(\"Current attunment: %s, returning %s\" % [get_current_attunement(), skill.name])",
		"            return skill",
		"    return null",
		"",
		"func handle_overloads(skill_utility: SkillUtility, skill_bar: Dictionary) -> SkillDataItem:",
		"    if (get_current_attunement() != ATTUNEMENT_INDEX.air):",
		"        return null",
		"    var overload_air: SkillDataItem = get_skill(OVERLOADS.overload_air)",
		"    if not skill_utility.is_on_cooldown(overload_air):",
		"        return overload_air",
		"    return null",
		"",
		"func handle_glyphs(skill_utility: SkillUtility, skill_bar: Dictionary) -> SkillDataItem:",
		"    if (get_current_attunement() != ATTUNEMENT_INDEX.air):",
		"        return",
		"    var lightning_storm: SkillDataItem = get_skill(GLYPH.lightning_storm)",
		"    var overload_air: SkillDataItem = get_skill(OVERLOADS.overload_air)",
		"    if not skill_utility.is_on_cooldown(lightning_storm) and skill_utility.is_on_cooldown(overload_air) and skill_utility.get_remaining_cooldown_time(overload_air) < OVERLOAD_THRESHOLD:",
		"        return lightning_storm",
		"    return null",
		"",
		"func handle_instant_casts(cc: ControlledCharacter, skill_bar: Dictionary, skill_utility: SkillUtility):",
		"    # Assign default values if null",
		"    cc = cc if cc != null else get_character_utility().get_cc()",
		"    skill_utility = skill_utility if skill_utility != null else get_skill_utility()",
		"",
		"    var target = cc.selection",
		"    var overload_air: SkillDataItem = get_from_skillbar(OVERLOADS.overload_air)",
		"",
		"    # Handle \"Feel the Burn\"",
		"    var feel_the_burn: SkillDataItem = get_from_skillbar(INSTANT_CASTS.feel_the_burn)",
		"    if feel_the_burn and not skill_utility.is_on_cooldown(feel_the_burn) and target != null:",
		"        cast_skill(feel_the_burn, target)",
		"",
		"    # Handle \"Flame Barrage\"",
		"    var flame_barrage: SkillDataItem = get_from_skillbar(INSTANT_CASTS.flame_barrage)",
		"    if flame_barrage and not skill_utility.is_on_cooldown(flame_barrage) and target != null:",
		"        cast_skill(flame_barrage, target)",
		"",
		"    # Handle \"Arc Lightning\"",
		"    var lightning_strike: SkillDataItem = get_from_skillbar(INSTANT_CASTS.lightning_strike)",
		"    if get_current_attunement() == ATTUNEMENT_INDEX.air and lightning_strike and not skill_utility.is_on_cooldown(lightning_strike) and target != null:",
		"        cast_skill(lightning_strike, target)",
		"",
		"    # Handle \"Blinding Flash\"",
		"    var blinding_flash: SkillDataItem = get_from_skillbar(INSTANT_CASTS.blinding_flash)",
		"    if get_current_attunement() == ATTUNEMENT_INDEX.air and blinding_flash and not skill_utility.is_on_cooldown(blinding_flash) and target != null:",
		"        cast_skill(blinding_flash, target)",
		"",
		"func _compare_skillbars() -> bool:",
		"    if skill_bar == _skillbar:",
		"        return true",
		"    else:",
		"        skill_bar = get_skillbar()",
		"        if skill_bar == _skillbar:",
		"            return true",
		"        return false",
		"",
		"func should_abort() -> bool:",
		"    var all_skills := {}",
		"    var enums = [HEALS, DEFIANCE_BREAK, OVERLOADS, GLYPH]",
		"    for enum_type in enums:",
		"        var skills_dict = _get_skills_from_enum(enum_type.values())",
		"        for key in skills_dict.keys():",
		"            all_skills[key] = skills_dict[key]",
		"    return get_current_attunement() == ATTUNEMENT_INDEX.air and not skill_util.is_on_cooldown(all_skills[OVERLOADS.overload_air]) and not skill_util.is_any_being_cast(all_skills)",
		"",
		"func _get_skills_from_enum(enum_values: Array) -> Dictionary:",
		"    var skills_dict := {}",
		"    for value in enum_values:",
		"        skills_dict[value] = get_skill(value)",
		"    return skills_dict",
		"",
		"func _are_weapons_valid() -> bool:",
		"    var has_scepter: bool = get_weapon(true, false) == WeaponTypeEnum.Scepter",
		"    var has_warhorn: bool = get_weapon(false, false) == WeaponTypeEnum.Warhorn",
		"    if (not has_scepter):",
		"        Log.warn(\"Character does not have a Scepter equipped. Profile will not run\")",
		"        runnable = false",
		"    if (not has_warhorn):",
		"        Log.warn(\"Character does not have a Warhorn equipped. Profile will not run\")",
		"        runnable = false",
		"    runnable = true",
		"    return runnable",
		"",
		"func _is_tempest() -> bool:",
		"    # Hardcoded for now as there is a mismatch with the enums",
		"    if get_elite_spec_id() != 48:",
		"        Log.warn('Profile \"%s\" needs a Tempest. See profile description for instructions.' % [get_profile_name()])",
		"        runnable = false",
		"    runnable = true",
		"    return runnable",
		"",
		"func _evaluate_can_run() -> bool:",
		"    if not _is_tempest():",
		"        return false",
		"    return true",
		"",
		"func get_current_attunement() -> int:",
		"    return get_character_utility().get_profession_state()"
	],
	"last_updated": "2024-07-26 17:45:15",
	"profession_id": 6,
	"profession_name": "Elementalist",
	"profile_name": "Harveys Power Tempest v1.1",
	"skills": {
		"5492": {
			"instant_cast": false
		},
		"5493": {
			"activation_time": [
				true,
				50
			],
			"instant_cast": false
		},
		"5494": {
			"activation_time": [
				true,
				50
			],
			"instant_cast": false
		},
		"5495": {
			"instant_cast": false
		},
		"29719": {
			"activation_time": [
				false,
				3239
			]
		},
		"30662": {
			"skill_range": [
				true,
				600
			]
		}
	},
	"template_code": "[&DQYpLxE+MBfHEgAAwxIAAL4BAADLAAAAJgAAAAAAAAAAAAAAAAAAAAAAAAA=]"
}