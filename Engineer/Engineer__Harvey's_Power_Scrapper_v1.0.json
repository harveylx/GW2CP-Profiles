{
	"@type": "profile_container",
	"build_ref": "https://hardstuck.gg/gw2/builds/engineer/power-scrapper/",
	"configuration": {
		"Combat": {
			"BreakStun": true,
			"DefianceBreak": true,
			"EnableCombatBehaviour": true,
			"EnableCombatService": true,
			"EnableDownstateCombat": true,
			"EnablePetCombat": true,
			"RescuePets": true,
			"ResetSkillTransformations": true,
			"SwapRangerPets": true,
			"SwapWeapons": true,
			"WeaponFiller": false
		},
		"Targeting": {
			"EffectiveRangeAdjust": 1,
			"PreferMelee": false
		}
	},
	"default": 1,
	"description": "Initial power scrapper profile, needs a lot of improvement",
	"export_config": 1,
	"game_modes": "100111",
	"global_script": [
		"enum MINES {",
		"    throw_mine = 6161,",
		"    detonate_mine = 6162",
		"}",
		"",
		"enum HEALS {",
		"",
		"}",
		"",
		"enum DEFIANCE_BREAK {",
		"}",
		"",
		"enum WEAPON_SKILLS {",
		"    positive_strike = 30501,",
		"    electro_whirl = 30088,",
		"    rocket_charge = 30665,",
		"    thunderclap = 30713,",
		"}",
		"",
		"enum GYROS {",
		"    shredder_gyro = 29921,",
		"    function_gyro = 56920",
		"}",
		"",
		"enum TOOLBELT_SKILLS {",
		"    static_shock = 21661,",
		"    grenade_barrage = 5810,",
		"    spare_capacitor = 31167,",
		"    mine_field = 6164,",
		"}",
		"",
		"enum INSTANT_CASTS {",
		"    detonate_mine_field = 6166",
		"}",
		"",
		"enum GRENADE_KIT_SKILLS {",
		"    unload_grenade_kit = 5805,",
		"    poison_grenade = 5806,",
		"    shrapnel_grenade = 5807,",
		"    freeze_grenade = 5809,",
		"    stow_grenade_kit = 6110",
		"}",
		"",
		"const _ACTIVATION_TIME_CONFIG: Dictionary = {",
		"",
		"}",
		"",
		"var runnable: bool = false",
		"var skill_util: SkillUtility = get_skill_utility()",
		"var agent_util: AgentUtility = get_agent_utility()",
		"var geometry_util: GeometryUtility = get_geometry_utility()",
		"var character_util: CharacterUtility = get_character_utility()",
		"var _controlled_character: ControlledCharacter",
		"",
		"func _process(_delta: float) -> void:",
		"    if not _controlled_character:",
		"        _controlled_character = get_character_utility().get_cc()",
		"    if should_abort(_controlled_character, skill_util, geometry_util):",
		"        abort_action()",
		"    #if(not runnable):",
		"        #return",
		"    toggle_combat_behavior(true)",
		"    if not is_combat_assist_enabled():",
		"        return",
		"    handle_instant_casts(_controlled_character, skill_util)",
		"",
		"func initialize() -> void:",
		"    if skill_util == null:",
		"        skill_util = get_skill_utility()",
		"    if agent_util == null:",
		"        agent_util = get_agent_utility()",
		"    if geometry_util == null:",
		"        geometry_util = get_geometry_utility()",
		"    if character_util == null:",
		"        character_util = get_character_utility()",
		"",
		"func select_skill(cc: ControlledCharacter, target: Agent, _skill_id_filter: Array = []) -> SkillDataItem:",
		"    #if not _is_scrapper() or not _are_weapons_valid():",
		"        #runnable = false",
		"        #return null",
		"",
		"    if character_util == null:",
		"        character_util = get_character_utility()",
		"",
		"    var next_skill: SkillDataItem = get_next_skill(cc, target, skill_util, agent_util, character_util)",
		"",
		"    if next_skill != null:",
		"        if _ACTIVATION_TIME_CONFIG.has(next_skill.id):",
		"            next_skill.activation_time = _ACTIVATION_TIME_CONFIG[next_skill.id] * 2",
		"",
		"        var distance = geometry_util.get_distance_between(cc, target, true)",
		"        var game_distance = geometry_util.convert_to_game_distance(distance)",
		"",
		"        if next_skill.skill_range != null and next_skill.skill_range != 0:",
		"            if game_distance > next_skill.skill_range:",
		"                return null",
		"        elif next_skill.skill_radius != null and next_skill.skill_radius != 0:",
		"            if game_distance > next_skill.skill_radius:",
		"                return null",
		"",
		"    return next_skill",
		"",
		"func get_next_skill(cc: ControlledCharacter, target: Agent, skill_utility: SkillUtility, agent_utility: AgentUtility, character_utility: CharacterUtility) -> SkillDataItem:",
		"    var defiance: SkillDataItem = handle_defiance(skill_utility, agent_utility, target)",
		"    var combos: SkillDataItem = handle_combos_and_grenades(cc, skill_utility, character_utility, target)",
		"    var mines: SkillDataItem = handle_mines(cc, skill_utility, character_utility, target)",
		"    var toolbelt: SkillDataItem = handle_toolbelt(cc, skill_utility, character_utility, target)",
		"    var weapon_skill: SkillDataItem = get_skill_in_slot(SkillbarSlotEnum.Weapon1)",
		"",
		"    if not defiance == null:",
		"        return defiance",
		"    if not combos == null:",
		"        return combos",
		"    if not mines == null:",
		"        return mines",
		"    if not toolbelt == null:",
		"        return toolbelt",
		"    return weapon_skill",
		"",
		"func handle_defiance(skill_utility: SkillUtility, agent_utility: AgentUtility, target: Agent) -> SkillDataItem:",
		"    return null",
		"",
		"func handle_combos_and_grenades(cc: ControlledCharacter, skill_utility: SkillUtility, character_utility: CharacterUtility, target: Agent) -> SkillDataItem:",
		"    var result = handle_thunderclap_shredder_gyro_combo(cc, skill_utility, character_utility, target)",
		"    if result != null:",
		"        return result",
		"",
		"    # Call the electro whirl and grenade kit combo function",
		"    result = handle_electro_whirl_grenade_combo(cc, skill_utility, character_utility, target)",
		"    if result != null:",
		"        return result",
		"    return null",
		"",
		"func handle_thunderclap_shredder_gyro_combo(cc: ControlledCharacter, skill_utility: SkillUtility, character_utility: CharacterUtility, target: Agent) -> SkillDataItem:",
		"    var thunderclap: SkillDataItem = get_skill(WEAPON_SKILLS.thunderclap)",
		"    var shredder_gyro: SkillDataItem = get_skill(GYROS.shredder_gyro)",
		"    var stow_grenade_kit: SkillDataItem = get_skill(GRENADE_KIT_SKILLS.stow_grenade_kit)",
		"    var grenade_kit_active: bool = character_utility.has_effect(EffectTypeEnum.GrenadeKit)",
		"",
		"",
		"    if (",
		"        not skill_utility.is_on_cooldown(thunderclap) and",
		"        not is_currently_casting(cc, thunderclap)",
		"    ):",
		"        # If Grenade Kit is active, return Stow Grenade Kit",
		"        if grenade_kit_active:",
		"            return stow_grenade_kit",
		"        return thunderclap",
		"",
		"    if is_currently_casting(cc, thunderclap):",
		"        return shredder_gyro",
		"",
		"    if (",
		"        not skill_utility.is_on_cooldown(shredder_gyro) and",
		"        not is_currently_casting(cc, shredder_gyro)",
		"    ):",
		"        return shredder_gyro",
		"    return null",
		"",
		"func handle_electro_whirl_grenade_combo(cc: ControlledCharacter, skill_utility: SkillUtility, character_utility: CharacterUtility, target: Agent) -> SkillDataItem:",
		"    var electro_whirl: SkillDataItem = get_skill(WEAPON_SKILLS.electro_whirl)",
		"    var unload_grenade_kit: SkillDataItem = get_skill(GRENADE_KIT_SKILLS.unload_grenade_kit)",
		"    var shrapnel_grenade: SkillDataItem = get_skill(GRENADE_KIT_SKILLS.shrapnel_grenade)",
		"    var poison_grenade: SkillDataItem = get_skill(GRENADE_KIT_SKILLS.poison_grenade)",
		"    var freeze_grenade: SkillDataItem = get_skill(GRENADE_KIT_SKILLS.freeze_grenade)",
		"    var stow_grenade_kit: SkillDataItem = get_skill(GRENADE_KIT_SKILLS.stow_grenade_kit)",
		"    var grenade_kit_active: bool = character_utility.has_effect(EffectTypeEnum.GrenadeKit)",
		"",
		"    # If Grenade Kit is not active and Electro Whirl is ready, return Electro Whirl",
		"    if not grenade_kit_active and not skill_utility.is_on_cooldown(electro_whirl) and not is_currently_casting(cc, electro_whirl):",
		"        return electro_whirl",
		"",
		"    # If casting Electro Whirl, cast Unload Grenade Kit",
		"    if is_currently_casting(cc, electro_whirl):",
		"        cast_skill(unload_grenade_kit, target)",
		"        if grenade_kit_active:",
		"            return shrapnel_grenade",
		"",
		"    if grenade_kit_active and not skill_utility.is_on_cooldown(poison_grenade) and not is_currently_casting(cc, poison_grenade):",
		"        return poison_grenade",
		"",
		"    if grenade_kit_active and not skill_utility.is_on_cooldown(freeze_grenade) and not is_currently_casting(cc, freeze_grenade):",
		"        return freeze_grenade",
		"",
		"    # If Grenade Kit is active, return Stow Grenade Kit",
		"    if grenade_kit_active:",
		"        return stow_grenade_kit",
		"",
		"    return null",
		"",
		"func handle_mines(cc: ControlledCharacter, skill_utility: SkillUtility, character_utility: CharacterUtility, target: Agent) -> SkillDataItem:",
		"    var throw_mine: SkillDataItem = get_skill(MINES.throw_mine)",
		"    var detonate_mine: SkillDataItem = get_skill(MINES.detonate_mine)",
		"    var detonate_mine_active: bool = character_utility.has_effect(EffectTypeEnum.DetonateMine)",
		"",
		"    if detonate_mine_active:",
		"        return detonate_mine",
		"",
		"    if not skill_utility.is_on_cooldown(throw_mine) and not is_currently_casting(cc, throw_mine):",
		"        return throw_mine",
		"",
		"    return null",
		"",
		"func handle_toolbelt(cc: ControlledCharacter, skill_utility: SkillUtility, character_utility: CharacterUtility, target: Agent) -> SkillDataItem:",
		"    var grenade_barrage: SkillDataItem = get_skill(TOOLBELT_SKILLS.grenade_barrage)",
		"    var mine_field: SkillDataItem = get_skill(TOOLBELT_SKILLS.mine_field)",
		"    var spare_capacitor: SkillDataItem = get_skill(TOOLBELT_SKILLS.spare_capacitor)",
		"    var static_shock: SkillDataItem = get_skill(TOOLBELT_SKILLS.static_shock)",
		"",
		"    if not skill_utility.is_on_cooldown(grenade_barrage) and not is_currently_casting(cc, grenade_barrage):",
		"        return grenade_barrage",
		"",
		"    if not skill_utility.is_on_cooldown(mine_field) and not is_currently_casting(cc, mine_field):",
		"        return mine_field",
		"",
		"    if not skill_utility.is_on_cooldown(spare_capacitor) and not is_currently_casting(cc, spare_capacitor):",
		"        return spare_capacitor",
		"",
		"    if not skill_utility.is_on_cooldown(static_shock) and not is_currently_casting(cc, static_shock):",
		"        return static_shock",
		"",
		"    return null",
		"",
		"func handle_instant_casts(cc: ControlledCharacter, skill_utility: SkillUtility) -> void:",
		"    # Assign default values if null",
		"    cc = cc if cc != null else get_character_utility().get_cc()",
		"    skill_utility = skill_utility if skill_utility != null else get_skill_utility()",
		"",
		"    var target = cc.selection",
		"",
		"    # Handle \"Detonate Mine Field\"",
		"    var detonate_mine_field: SkillDataItem = get_from_skillbar(INSTANT_CASTS.detonate_mine_field)",
		"    if detonate_mine_field and not skill_utility.is_on_cooldown(detonate_mine_field) and target != null:",
		"        cast_skill(detonate_mine_field, target)",
		"",
		"    # Handle \"Flame Barrage\"",
		"    #var flame_barrage: SkillDataItem = get_from_skillbar(INSTANT_CASTS.flame_barrage)",
		"    #if flame_barrage and not skill_utility.is_on_cooldown(flame_barrage) and target != null:",
		"        #if not feel_the_burn.skill_range == null:",
		"            #var distance = geometry_util.get_distance_between(cc, target, true)",
		"            #var game_distance = geometry_util.convert_to_game_distance(distance)",
		"            #if game_distance > flame_barrage.skill_range:",
		"                #return",
		"            #cast_skill(flame_barrage, target)",
		"    return",
		"",
		"func is_currently_casting(cc: ControlledCharacter, skill: SkillDataItem) -> bool:",
		"    var cast_info: CastInfo = cc.get_cast_info()",
		"    if  not cast_info == null:",
		"        return skill.id == cast_info.skill_id",
		"    return false",
		"",
		"func should_abort(cc: ControlledCharacter, skill_utility: SkillUtility, geometry_utility: GeometryUtility) -> bool:",
		"    return false",
		"",
		"func _are_weapons_valid() -> bool:",
		"    runnable = get_weapon(true, false) == WeaponTypeEnum.Hammer",
		"    if not runnable:",
		"        Log.warn(\"Character does not have a Hammer equipped. Profile will not run.\")",
		"    return runnable",
		"",
		"func _is_scrapper() -> bool:",
		"    # Hardcoded for now as there is a mismatch with the enums",
		"    runnable = get_elite_spec_id() == 43",
		"    if not runnable:",
		"        Log.warn('Profile \"%s\" needs a Scrapper. See profile description for instructions.' % [get_profile_name()])",
		"    return runnable",
		"",
		"func _evaluate_can_run() -> bool:",
		"    if not _is_scrapper():",
		"        return false",
		"    return true"
	],
	"last_updated": "2024-08-16 23:14:13",
	"profession_id": 3,
	"profession_name": "Engineer",
	"profile_name": "Harvey's Power Scrapper v1.0",
	"skills": {
		"30501": {
			"complete_chain": true
		}
	},
	"template_code": "[&DQMGNyYvKz0qDwAAhgAAACYBAACuEgAAmAEAAAAAAAAAAAAAAAAAAAAAAAA=]"
}